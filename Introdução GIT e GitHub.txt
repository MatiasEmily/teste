windows: shell
Unix: bash (OSs Linux e Apple)

Command line interface (CLI)
- listar pastas (dir, ls, ls -a)
- buscar diretório com change direct (cd, cd /)
- retroceder pasta (cd ..)
- limpar terminal (cls, clear ou ctrl+l)
- autocompletar texto (tab)
- criar pastas, make directory (mkdir)
- criar arquivo (echo hello > hello.txt)
- deletar arquivos (del nomedapasta)
- mover arquivo (mv arquivo.ext ./pasta/)
- acessar últimos comandos (seta para cima)
- deletar pasta, remove directory (rmdir, rm)

flags (complementos que acrescentam, modificam formato de comandos)
Windows: rmdir /S /Q
Bash: rm -rf (recursive force, apaga todas internas, e força confirmação)

Graphic user interface (GUI)

---

GIT
SHA1: Secure Hash Algorithm
Encriptação alfanumérica de identificação única de 40 dígitos

OBJETOS FUNDAMENTAIS
BLOB: metadados, tipo, tamanho, \o, conteúdo do arquivo, sha1
TREE: Armazenam blobs, metadados, \o, aponta para arquivos ou árvores, sha1
COMMIT: Armazenam trees, parente, autor, mensagem, timestamp; o SHA1 desse commit é o hash de toda essa informação

- Exemplo no Git:
echo 'conteudo' | git hash-object --stdin
chaveSHA1de40digitos

echo -e 'blob 9\0conteudo' | openssl  sha1
chaveSHA1de40digitos

CRIAÇÃO DE CHAVE SSH NO GIT BASH
ssh-keygen -t ed25519 -c emailpadrao@dogithub
Escolha senha
Chaves encriptadas privada e pública geradas em local determinado

- Visualizar conteúdo de arquivo
$ cat chavepublica.pub
copiar código, para registrar chave pública SSH no GitHub

- Gerar agent no CLI
eval $(ssh-agent -s)
ssh-add chaveprivada

- Clonar repositório
git clone chaveSSHdodiretorionoGitHubclonavel
yes

TOKEN DE ACESSO PESSOAL
Serve como senha em logins do GitHub usado em protocolos HTTPS
Site do GitHub > Developer settings > Personal access tokens > Generate new token
O token gerado não poderá ser visto novamente, é importante salvá-lo em lugar seguro

---

- Typora: programa de edição de markdown
- Markdown (.md): espécie de HTML simplificado

ESTRUTURA DO GIT
Arquivos rastreados pelo GIT (Tracked): Unmodified (pode ser removido), Modified, Staged (commita, retorna para unmodified)
Arquivos não rastreados: Untracked

1 AMBIENTE DE DESENVOLVIMENTO
Working directory: diretório de trabalho não modificado
Staging area: cria snapshots de versões
Local repository: composto por commits, que serão enviadas para repositório remoto

2 SERVIDOR
Remote repository

COMANDOS NO GIT
- Inicialização do Git para repositório (git init)
- Registro de autor no Git
git config --global "seuemail@email.com"
git config --global user.name Nome

- Adicionar commit inicial
git add *
git commit -m "Commit inicial 1.0"

- Adicionar todas modificações do repositório local para Staged
git add .

- Criar commit
git commit -m "Mensagem explicando atualização"

- Monitorar status do diretório
git status

- Adicionar atualização para Staged
git add nomearq.ext pasta/

- Restaurar da área de Staged
git restore --staged nomearq.ext

- Adicionar origem para "empurrar" no repositório do GitHub (origin é o apelido usado para evitar repetição de digitação)
git remote add origin http://github.com/SeuGit/linkdorepositorio.git

- Lista repositórios cadastrados
git remote -v

- Empurrar de repositório local para remoto (branch master)
git push origin master

- Puxa conteúdo do repositório
git pull origin master

- Clonar um repositório alheio
git clone https://github.com/Repositorio/Pastadele.git

---

Tipos de conflitos comuns

MERGE CONFLICTS: Sincronização de alterações diferentes em mesma linha, escolhe qual/como a alteração ficará